// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  userId        String?   // Mantle's internal user ID for session token matching
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userOrganizations  UserOrganization[]
  userAccessTokens   UserAccessToken[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  mantleId    String   @unique // Mantle's organization ID
  name        String
  accessToken String   // OAuth access token for JWT verification
  apiToken    String?  // Mantle API token for customer identification
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userOrganizations UserOrganization[]
  userAccessTokens  UserAccessToken[]

  @@map("organizations")
}

model UserOrganization {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

model UserAccessToken {
  id             String    @id @default(cuid())
  userId         String
  organizationId String
  accessToken    String    // The actual access token
  tokenType      String    // "online" or "offline"
  scope          String    // Comma-separated list of scopes
  expiresAt      DateTime? // For online tokens, null for offline tokens
  refreshToken   String?   // For online tokens that can be refreshed
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId, tokenType])
  @@map("user_access_tokens")
}
