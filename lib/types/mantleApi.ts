/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all apps
         * @description Get a list of apps that the authenticated user has permission to access.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter apps updated after this timestamp */
                    minUpdatedAt?: string;
                    /** @description Filter apps updated before this timestamp */
                    maxUpdatedAt?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of apps. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            apps: components["schemas"]["App"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/charges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all charges
         * @description Get a list of all charges for a specific organization.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Optionally groups charges by a specific field. */
                    groupBy?: "customer";
                    /** @description The page number to retrieve */
                    page?: components["parameters"]["page"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of charges. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Charge"][];
                    };
                };
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of companies
         * @description Get a paginated list of companies with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of companies. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CursorPagination"] & {
                            companies?: components["schemas"]["Company"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Create a company
         * @description Create a new company. IF no parentCustomerId is provided, a new customer will be created.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the company */
                        name?: string;
                        /** @description The id of the primary customer, if any. */
                        parentCustomerId?: string;
                    };
                };
            };
            responses: {
                /** @description The created company. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Company"];
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of contacts
         * @description Get a paginated list of contacts with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The page number to retrieve */
                    page?: components["parameters"]["page"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The search term to filter by */
                    search?: components["parameters"]["search"];
                    /** @description The minimum date/time (ISO 8601) of the last update to the Contact */
                    minUpdatedAt?: string;
                    /** @description The maximum date/time (ISO 8601) of the last update to the Contact */
                    maxUpdatedAt?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of contacts. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pagination"] & {
                            contacts?: components["schemas"]["Contact"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Create a contact
         * @description Create a new contact.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        email?: string;
                        phone?: string;
                        jobTitle?: string;
                        notes?: string;
                        tags?: string[];
                        customers?: components["schemas"]["CustomerContact"][];
                        /** @description Array of JSON objects containing social links or profiles. */
                        socialProfiles?: {
                            /**
                             * @description The type of social profile.
                             * @enum {string}
                             */
                            key?: "linkedin" | "x" | "facebook" | "instagram" | "website";
                            /** @description The URL of the social profile. */
                            value?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description The created contact. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Contact"];
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer_segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all customer segments
         * @description Get a list of customer segments for the authenticated organization. Only public segments are returned.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of customer segments. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customerSegments?: components["schemas"]["CustomerSegment"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all customers
         * @description Get a paginated list of customers with optional filters and sorting.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The page number to retrieve */
                    page?: components["parameters"]["page"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The search term to filter by */
                    search?: components["parameters"]["search"];
                    /** @description The minimum date/time (ISO 8601) of the last update to the Customer */
                    minUpdatedAt?: string;
                    /** @description The maximum date/time (ISO 8601) of the last update to the Customer */
                    maxUpdatedAt?: string;
                    /** @description An optional list of appIds to filter customers by (they must have a previous or current installation of the app). */
                    appIds?: string[];
                    /** @description An optional shopify shop domain to filter customers by. */
                    shopifyShopDomain?: string;
                    /** @description An optional shopify shop id to filter customers by. */
                    shopifyShopId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of customers. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pagination"] & {
                            customers: components["schemas"]["Customer"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Create a new customer
         * @description Create a new customer with the provided details.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Customer"];
            responses: {
                /** @description The created customer. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customer?: components["schemas"]["Customer"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deal_flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of deal flows
         * @description Get a paginated list of deal flows.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The page number to retrieve */
                    page?: components["parameters"]["page"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of deal flows. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pagination"] & {
                            dealFlows?: components["schemas"]["DealFlow"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Create a deal flow
         * @description Create a new deal flow with stages.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the deal flow */
                        name: string;
                        /** @description The description of the deal flow */
                        description?: string;
                        /** @description Array of deal stages (minimum 2 required) */
                        dealStages: {
                            /** @description The name of the deal stage */
                            name: string;
                            /** @description The display order of the stage */
                            displayOrder?: number;
                            /** @description The stage type */
                            stage: string;
                            /**
                             * Format: float
                             * @description The weight/probability of the stage (0-100)
                             */
                            weight?: number;
                            /** @description The trigger for the stage */
                            trigger?: string;
                        }[];
                        /** @description The default acquisition channel */
                        defaultAcquisitionChannel?: string;
                        /** @description The default acquisition source */
                        defaultAcquisitionSource?: string | {
                            id?: string;
                        };
                        /** @description The ID of the default deal owner */
                        defaultDealOwnerId?: string;
                    };
                };
            };
            responses: {
                /** @description The created deal flow. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DealFlow"];
                    };
                };
                /** @description Bad request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of deals
         * @description Get a paginated list of deals with optional filters and sorting.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The page number to retrieve */
                    page?: components["parameters"]["page"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description Filter deals by customer ID */
                    customerId?: string;
                    /** @description Filter deals by app ID */
                    appId?: string;
                    /** @description Filter deals by plan ID */
                    planId?: string;
                    /** @description Filter deals by deal stage ID */
                    dealStageId?: string;
                    /** @description Filter deals by deal flow ID */
                    dealFlowId?: string;
                    /** @description Filter deals by affiliate ID */
                    affiliateId?: string;
                    /** @description Filter deals by partnership ID */
                    partnershipId?: string;
                    /** @description Filter deals by acquirer ID */
                    acquirerId?: string;
                    /** @description Filter deals by owner ID */
                    ownerId?: string;
                    /** @description Filter deals by contact ID */
                    contactId?: string;
                    /** @description Filter deals by stage */
                    stage?: string;
                    /** @description Filter deals by step */
                    step?: string;
                    /** @description Minimum deal amount */
                    minAmount?: number;
                    /** @description Maximum deal amount */
                    maxAmount?: number;
                    /** @description Minimum current deal amount */
                    minCurrentAmount?: number;
                    /** @description Maximum current deal amount */
                    maxCurrentAmount?: number;
                    /** @description Filter deals by acquisition channel */
                    acquisitionChannel?: string;
                    /** @description Filter deals by acquisition source */
                    acquisitionSource?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of deals. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Pagination"] & {
                            deals?: components["schemas"]["Deal"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Create a deal
         * @description Create a new deal.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the deal */
                        name: string;
                        /**
                         * Format: float
                         * @description The monetary value of the deal
                         */
                        amount?: number;
                        /** @description The currency code for the deal amount */
                        amountCurrencyCode?: string;
                        /** @description The channel through which the deal was acquired */
                        acquisitionChannel?: string;
                        /** @description The specific source of the deal acquisition */
                        acquisitionSource?: string;
                        /**
                         * Format: date-time
                         * @description The timestamp of the first interaction
                         */
                        firstInteractionAt?: string;
                        /**
                         * Format: date-time
                         * @description The expected closing date
                         */
                        closingAt?: string;
                        /**
                         * Format: date-time
                         * @description The actual closing date
                         */
                        closedAt?: string;
                        /** @description The ID of the deal flow */
                        dealFlowId: string;
                        /** @description The ID of the deal stage */
                        dealStageId: string;
                        /** @description The ID of the customer */
                        customerId?: string;
                        /** @description The ID of the company */
                        companyId?: string;
                        /** @description The ID of the app */
                        appId?: string;
                        /** @description The ID of the plan */
                        planId?: string;
                        /** @description Array of owner user IDs */
                        ownerIds?: string[];
                        /** @description Array of contact IDs */
                        contactIds?: string[];
                        /** @description Additional notes about the deal */
                        notes?: string;
                        /** @description The ID of the affiliate */
                        affiliateId?: string;
                        /** @description The ID of the partnership */
                        partnershipId?: string;
                    };
                };
            };
            responses: {
                /** @description The created deal. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Deal"];
                    };
                };
                /** @description Bad request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization details
         * @description Returns the details of the organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved organization details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Organization"];
                    };
                };
                401: components["responses"]["401"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of subscriptions
         * @description Retrieve a list of subscriptions across all apps and customers.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description Filter by app ID. */
                    appId?: string;
                    /** @description Filter by customer ID. */
                    customerId?: string;
                    /** @description Start date for custom date range. */
                    startDate?: string;
                    /** @description End date for custom date range. */
                    endDate?: string;
                    /** @description Filter by subscription IDs. */
                    ids?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of subscriptions. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            subscriptions?: components["schemas"]["Subscription"][];
                            hasNextPage?: boolean;
                            hasPreviousPage?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all transactions
         * @description Get a paginated list of transactions with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of transactions. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            transactions: components["schemas"]["Transaction"][];
                        } & components["schemas"]["Pagination"];
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usage_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get usage events
         * @description Get usage events for an app and customer. To filter by properties, pass a JSON array of objects with the following properties: `property`, `operator`, `value`. Valid operators are `equals`, `not_equals`, `in`, `not_in`, `is_blank`, `is_not_blank`, `is_true`, `is_false`.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description Filter events by app ID */
                    appId?: string;
                    /** @description Filter events by customer ID */
                    customerId?: string;
                    /** @description Filter events by event name */
                    eventName?: string;
                    /** @description Filter events by properties */
                    propertiesFilters?: {
                        property?: string;
                        /** @enum {string} */
                        operator?: "equals" | "not_equals" | "in" | "not_in" | "is_blank" | "is_not_blank" | "is_true" | "is_false";
                        value?: string;
                    }[];
                    /** @description Filter events by billing status */
                    billingStatus?: string;
                    /** @description Filter events by country code */
                    countryCode?: string;
                    /** @description Filter events by start date */
                    startDate?: string;
                    /** @description Filter events by end date */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The usage events were successfully retrieved. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            events: components["schemas"]["UsageEvent"][];
                        } & components["schemas"]["Pagination"];
                    };
                };
                /** @description The user is not authorized to access the usage events. */
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /**
         * Create a new usage event
         * @description Create a new usage event with the provided details.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["UsageEvent"];
            responses: {
                /** @description The usage event was successfully created. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all users
         * @description List all users in the organization.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            users?: components["schemas"]["User"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all webhooks
         * @description Get a list of webhooks for the authenticated organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of webhooks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            webhooks: components["schemas"]["Webhook"][];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new webhook
         * @description Create a new webhook for the authenticated organization.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The topic of the webhook */
                        topic?: string;
                        /**
                         * Format: uri
                         * @description The address where the webhook will be sent
                         */
                        address?: string;
                        /** @description List of application IDs to register this webhook for. If not set, will register for all apps. */
                        appIds?: string[];
                        /** @description The filter criteria for the webhook. This property only applies to the customers/usage_event topic. */
                        filter?: {
                            /** @description Only usage events with a matching name will fire this webhook. */
                            eventName?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description The created webhook */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            webhook?: components["schemas"]["Webhook"];
                        };
                    };
                };
                401: components["responses"]["401"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/custom_fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of custom fields
         * @description Gets a list of custom fields.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The ID of the app to get custom */
                    appId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of custom fields */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customFields?: components["schemas"]["CustomField"][];
                        };
                    };
                };
                401: components["responses"]["401"];
            };
        };
        put?: never;
        /**
         * Create a custom field
         * @description Creates a new custom field.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the app to associate with the custom field */
                        appId?: string;
                        /** @description The name of the custom field */
                        name?: string;
                        /**
                         * @description The type of the custom field
                         * @enum {string}
                         */
                        type?: "string" | "number" | "json" | "checkbox" | "select" | "multiselect" | "url" | "date";
                        defaultValue?: components["schemas"]["CustomFieldDefaultValue"];
                        /** @description The options for the custom field if the type is "select" or "multiselect" */
                        options?: string[];
                        /** @description If true, and no appId is set, the field will be settable on all apps. If false and no appId is set, it will be a customer level field. */
                        appLevel?: boolean;
                        /** @description If true, the field will be shown on the customer detail page by default. Can be toggled by the user. */
                        showOnCustomerDetail?: boolean;
                        /**
                         * @description If true, your field will only be accessible via the API by your client. If false, all clients can access the field but only your client can mutate it.
                         * @default true
                         */
                        private?: boolean;
                        /**
                         * @description If true, the custom field can be used as a filter in the customer list and customer segments.
                         * @default true
                         */
                        filterable?: boolean;
                    };
                };
            };
            responses: {
                /** @description The created custom field */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customField?: components["schemas"]["CustomField"];
                        };
                    };
                };
                /** @description Invalid custom field type */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid custom field type */
                            error?: string;
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description App not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example App not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/unsubscribe_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all email unsubscribe groups
         * @description Get a list of email unsubscribe groups.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of email unsubscribe groups. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            unsubscribeGroups: components["schemas"]["EmailUnsubscribeGroup"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flow/extensions/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all flow actions
         * @description Get a list of flow actions for the authenticated user's organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of flow actions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            actions?: components["schemas"]["Action"][];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new flow action
         * @description Create a new flow action for the authenticated user's organization.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        description?: string;
                        url?: string;
                        settingsSchema?: Record<string, never>;
                        handle?: string;
                    };
                };
            };
            responses: {
                /** @description The created API action */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            action?: components["schemas"]["Action"];
                        };
                    };
                };
                401: components["responses"]["401"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an app
         * @description Gets an app by its ID and returns its details.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app to fetch. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully fetched the app. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            app: components["schemas"]["App"];
                        };
                    };
                };
                /** @description App not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/plans/{planId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a plan
         * @description Gets a plan by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                    /** @description The ID of the plan. */
                    planId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            plan?: components["schemas"]["Plan"];
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description Plan not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a plan
         * @description Updates an existing plan with the provided details. Certain properties like amount, interval, and currency code cannot be updated.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                    /** @description The ID of the plan. */
                    planId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        public?: boolean;
                        visible?: boolean;
                        name?: string;
                        description?: string;
                        deprecated?: boolean;
                        trialDays?: number;
                        features?: {
                            featureId?: string;
                            value?: string;
                        }[];
                        needsReview?: boolean;
                        customerTags?: string[];
                        customerExcludeTags?: string[];
                        shopifyPlans?: string[];
                        customer?: Record<string, never>;
                        planUsageCharges?: Record<string, never>[];
                        amount?: number;
                        interval?: string;
                        customFields?: Record<string, never>;
                        usageChargeCappedAmount?: number;
                        basePlanIds?: string[];
                        type?: string;
                        flexBilling?: boolean;
                        flexBillingTerms?: Record<string, never>;
                        onUsageLimitReached?: string;
                        autoUpgradeToPlanId?: string;
                        rollOverPendingUsage?: boolean;
                        recurringInterval?: string;
                        recurringIntervalCount?: number;
                    };
                };
            };
            responses: {
                /** @description Plan updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            plan?: components["schemas"]["Plan"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Plan not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}/addTags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add tags by contact ID
         * @description Add existing tags to a contact by its ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        tags?: string[];
                    };
                };
            };
            responses: {
                /** @description The contact with the updated tags. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contact?: components["schemas"]["Contact"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Contact not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a contact by ID
         * @description Retrieve a contact by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested contact. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contact?: components["schemas"]["Contact"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Contact not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        /**
         * Update a contact by ID
         * @description Update an existing contact by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        email?: string;
                        phone?: string;
                        jobTitle?: string;
                        notes?: string;
                        tags?: string[];
                        customers?: components["schemas"]["CustomerContact"][];
                        /** @description Array of JSON objects containing social links or profiles. */
                        socialProfiles?: {
                            /**
                             * @description The type of social profile.
                             * @enum {string}
                             */
                            key?: "linkedin" | "x" | "facebook" | "instagram" | "website";
                            /** @description The URL of the social profile. */
                            value?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description The updated contact. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contact?: components["schemas"]["Contact"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Contact not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a contact by ID
         * @description Delete an existing contact by its ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Contact successfully deleted. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Contact not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}/removeTags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove tags by contact ID
         * @description Remove existing tags to a contact by its ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        tags?: string[];
                    };
                };
            };
            responses: {
                /** @description The contact with the updated tags. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contact?: components["schemas"]["Contact"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Contact not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{id}/addTags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add tags by customer ID
         * @description Add new tags to a customer by its ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        tags?: string[];
                    };
                };
            };
            responses: {
                /** @description The customer with the updated tags. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customer?: components["schemas"]["Customer"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Customer not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a customer
         * @description Fetches a customer by their ID, including optional contact count.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The customer ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A customer object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customer?: components["schemas"]["Customer"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Customer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a customer
         * @description Updates a customer's details by their ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The customer ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Customer"];
            responses: {
                /** @description The updated customer object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customer?: components["schemas"]["Customer"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Customer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{id}/removeTags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove tags by customer ID
         * @description Remove existing tags to a customer by its ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        tags?: string[];
                    };
                };
            };
            responses: {
                /** @description The customer with the updated tags. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customer?: components["schemas"]["Customer"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Customer not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deal_flows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a deal flow by ID
         * @description Retrieve a deal flow by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested deal flow. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            dealFlow?: components["schemas"]["DealFlow"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Deal flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        /**
         * Update a deal flow by ID
         * @description Update an existing deal flow by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the deal flow */
                        name: string;
                        /** @description The description of the deal flow */
                        description?: string;
                        /** @description Array of deal stages (minimum 2 required) */
                        dealStages: {
                            /** @description The ID of the existing stage (if updating) */
                            id?: string;
                            /** @description The name of the deal stage */
                            name?: string;
                            /** @description The display order of the stage */
                            displayOrder?: number;
                            /** @description The stage type */
                            stage?: string;
                            /**
                             * Format: float
                             * @description The weight/probability of the stage (0-100)
                             */
                            weight?: number;
                            /** @description The trigger for the stage */
                            trigger?: string;
                        }[];
                        /** @description The default acquisition channel */
                        defaultAcquisitionChannel?: string;
                        /** @description The default acquisition source */
                        defaultAcquisitionSource?: string | {
                            id?: string;
                        };
                        /** @description The ID of the default deal owner */
                        defaultDealOwnerId?: string;
                    };
                };
            };
            responses: {
                /** @description The updated deal flow. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            dealFlow?: components["schemas"]["DealFlow"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Deal flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a deal flow by ID
         * @description Delete an existing deal flow by its ID (soft delete).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deal flow successfully deleted. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Deal flow not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a deal by ID
         * @description Retrieve a deal by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested deal. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            deal?: components["schemas"]["Deal"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Deal not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        /**
         * Update a deal by ID
         * @description Update an existing deal by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the deal */
                        name?: string;
                        /**
                         * Format: float
                         * @description The monetary value of the deal
                         */
                        amount?: number;
                        /** @description The currency code for the deal amount */
                        amountCurrencyCode?: string;
                        /** @description The channel through which the deal was acquired */
                        acquisitionChannel?: string;
                        /** @description The specific source of the deal acquisition */
                        acquisitionSource?: string;
                        /**
                         * Format: date-time
                         * @description The timestamp of the first interaction
                         */
                        firstInteractionAt?: string;
                        /**
                         * Format: date-time
                         * @description The expected closing date
                         */
                        closingAt?: string;
                        /**
                         * Format: date-time
                         * @description The actual closing date
                         */
                        closedAt?: string;
                        /** @description The ID of the deal flow */
                        dealFlowId?: string;
                        /** @description The ID of the deal stage */
                        dealStageId?: string;
                        /** @description The ID of the customer */
                        customerId?: string;
                        /** @description The ID of the company */
                        companyId?: string;
                        /** @description The ID of the app */
                        appId?: string;
                        /** @description The ID of the plan */
                        planId?: string;
                        /** @description Array of owner user IDs */
                        ownerIds?: string[];
                        /** @description Array of contact IDs */
                        contactIds?: string[];
                        /** @description Additional notes about the deal */
                        notes?: string;
                        /** @description The ID of the affiliate */
                        affiliateId?: string;
                        /** @description The ID of the partnership */
                        partnershipId?: string;
                    };
                };
            };
            responses: {
                /** @description The updated deal. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            deal?: components["schemas"]["Deal"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Deal not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Archive a deal by ID
         * @description Archive an existing deal by its ID (soft delete).
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deal successfully archived. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Deal not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flow/actions/runs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a flow action run
         * @description Update a flow action run for the authenticated user's organization.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the run. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "completed" | "failed";
                    };
                };
            };
            responses: {
                /** @description The updated flow action run */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            run?: components["schemas"]["FlowActionRun"];
                        };
                    };
                };
                401: components["responses"]["401"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a transaction
         * @description Fetches a transaction associated with the current organization by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the transaction to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A transaction object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"];
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Transaction not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user
         * @description Get a user by their ID within the context of the authenticated user's organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A user object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user: components["schemas"]["User"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User not found */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a webhook
         * @description Updates the details of an existing webhook.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the webhook to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The topic of the webhook */
                        topic?: string;
                        /**
                         * Format: uri
                         * @description The address where the webhook will be sent
                         */
                        address?: string;
                        /** @description List of application IDs to register this webhook for. If not set, will register for all apps. */
                        appIds?: string[];
                        /** @description The filter criteria for the webhook. This property only applies to the customers/usage_event topic. */
                        filter?: {
                            /** @description Only usage events with a matching name will fire this webhook. */
                            eventName?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description The updated webhook */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Webhook"];
                    };
                };
                401: components["responses"]["401"];
                /** @description Webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete a webhook
         * @description Marks a webhook as deleted.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the webhook to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted the webhook */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description Webhook not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/app_events/{appEventId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single app event
         * @description Retrieve a single app event for a specific app.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                    /** @description The ID of the app event. */
                    appEventId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A single app event. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            appEvent?: components["schemas"]["AppEvent"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App or App Event not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/app_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of app events
         * @description Retrieve a list of app events for a specific app.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The type of event to filter by */
                    type?: components["parameters"]["type"];
                    /** @description Filter events by start date */
                    startDate?: string;
                    /** @description Filter events by end date */
                    endDate?: string;
                };
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of app events. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            appEvents?: components["schemas"]["AppEvent"][];
                            cursor?: string;
                            hasNextPage?: boolean;
                            hasPreviousPage?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/plans/{planId}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Archive a plan
         * @description Archives a plan. Archived plans can not be mutated.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app */
                    id: string;
                    /** @description The ID of the plan */
                    planId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan archived successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            plan?: components["schemas"]["Plan"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/plans/{planId}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Unarchive a plan
         * @description Marks a plan as no longer deprecated. It can be mutated after being unarchived.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app */
                    id: string;
                    /** @description The ID of the plan */
                    planId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plan archived successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            plan?: components["schemas"]["Plan"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{appId}/plans/features/{featureId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the app */
                appId: string;
                /** @description ID of the feature */
                featureId: string;
            };
            cookie?: never;
        };
        /**
         * Get a feature
         * @description Fetches a feature by its ID for a given app within an organization.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    appId: string;
                    /** @description ID of the feature */
                    featureId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Feature retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            feature?: components["schemas"]["Feature"];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description App or feature not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a feature
         * @description Updates a feature by its ID for a given app within an organization.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    appId: string;
                    /** @description ID of the feature */
                    featureId: string;
                };
                cookie?: never;
            };
            /** @description Data to update the feature */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Feature"];
                };
            };
            responses: {
                /** @description Feature updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            feature?: components["schemas"]["Feature"];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description App or feature not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete a feature
         * @description Deletes a feature by its ID for a given app within an organization.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    appId: string;
                    /** @description ID of the feature */
                    featureId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Feature deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description App or feature not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{appId}/plans/features": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the app. */
                appId: string;
            };
            cookie?: never;
        };
        /**
         * Get list of features
         * @description Retrieves a list of features for a specific app.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    appId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of features retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            features?: components["schemas"]["Feature"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a feature
         * @description Creates a new feature for a specific app.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    appId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the feature. */
                        name?: string;
                        /** @description The key of the feature. */
                        key?: string;
                        /**
                         * @description The type of the feature.
                         * @enum {string}
                         */
                        type?: "boolean" | "limit" | "limit_with_overage";
                        /** @description The default value of the feature. */
                        defaultValue?: string;
                        /** @description A brief description of the feature. */
                        description?: string;
                        /** @description The ID of the usage metric associated with the feature. */
                        usageMetricId?: string;
                    };
                };
            };
            responses: {
                /** @description Feature created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            feature?: components["schemas"]["Feature"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of plans
         * @description Get a list of plans for a specific app.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter plans by public visibility. */
                    public?: boolean;
                    /** @description The page number for pagination. */
                    page?: number;
                    /** @description The number of plans per page. */
                    perPage?: number;
                    /** @description Search term to filter plans by name. */
                    search?: string;
                };
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of plans for the app. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Total number of plans. */
                            total?: number;
                            plans?: components["schemas"]["Plan"][];
                            /** @description Indicates if there are more plans. */
                            hasMore?: boolean;
                            /** @description The cursor for the next page. */
                            nextCursor?: number;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Create a new plan
         * @description Create a new plan for a specific app.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the plan. */
                        name?: string;
                        /** @description The description of the plan. */
                        description?: string;
                        /** @description The billing interval of the plan. */
                        interval?: string;
                        /** @description The currency code for the plan. */
                        currencyCode?: string;
                        /** @description The amount for the plan. */
                        amount?: number;
                        /** @description The number of trial days for the plan. */
                        trialDays?: number;
                        /** @description Indicates if the plan is public. */
                        public?: boolean;
                        /** @description Indicates if the plan is visible. */
                        visible?: boolean;
                        /** @description Tags for customers. */
                        customerTags?: string[];
                        /** @description Tags to exclude customers. */
                        customerExcludeTags?: string[];
                        /** @description Shopify plans associated with the plan. */
                        shopifyPlans?: string[];
                        /** @description Customer information. */
                        customer?: Record<string, never>;
                        /** @description Usage charges for the plan. */
                        planUsageCharges?: Record<string, never>[];
                        /** @description Custom fields for the plan. */
                        customFields?: Record<string, never>;
                        /** @description The type of the plan. */
                        type?: string;
                        /** @description Indicates if the plan has flexible billing. */
                        flexBilling?: boolean;
                        /** @description Terms for flexible billing. */
                        flexBillingTerms?: Record<string, never>;
                        /** @description Action when usage limit is reached. */
                        onUsageLimitReached?: string;
                        /** @description Plan ID to auto-upgrade to. */
                        autoUpgradeToPlanId?: string;
                        /** @description Indicates if pending usage should roll over. */
                        rollOverPendingUsage?: boolean;
                        /** @description Capped amount for usage charges. */
                        usageChargeCappedAmount?: number;
                        features?: {
                            /** @description The ID of the feature. */
                            featureId?: string;
                            /** @description The value of the feature. */
                            value?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description The created plan. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Plan"];
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/reviews/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a review
         * @description Get a review by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                    /** @description The ID of the review. */
                    reviewId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The review. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            review?: components["schemas"]["Review"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Review not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of reviews
         * @description Get a list of reviews for a specific app.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The cursor to paginate from */
                    cursor?: components["parameters"]["cursor"];
                    /** @description The number of records to retrieve */
                    take?: components["parameters"]["take"];
                    /** @description The field to sort by */
                    sort?: components["parameters"]["sort"];
                    /** @description The direction to sort by */
                    sortDirection?: components["parameters"]["sortDirection"];
                };
                header?: never;
                path: {
                    /** @description The ID of the app. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of reviews for the app. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CursorPagination"] & {
                            reviews?: components["schemas"]["Review"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/usage_metrics/{usageMetricId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a usage metric
         * @description Retrieve a specific usage metric for a specific app.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    id: string;
                    /** @description ID of the usage metric */
                    usageMetricId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A usage metric */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            usageMetric?: components["schemas"]["UsageMetric"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App or usage metric not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a usage metric
         * @description Update an existing usage metric for a specific app.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    id: string;
                    /** @description ID of the usage metric */
                    usageMetricId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        eventName?: string;
                        calculation?: string;
                        params?: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description Usage metric updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            usageMetric?: components["schemas"]["UsageMetric"];
                        };
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App or usage metric not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete a usage metric
         * @description Delete an existing usage metric for a specific app.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    id: string;
                    /** @description ID of the usage metric */
                    usageMetricId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Usage metric deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App or usage metric not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{id}/usage_metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of usage metrics
         * @description Retrieve a list of usage metrics for a specific app.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of usage metrics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            usageMetrics?: components["schemas"]["UsageMetric"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a usage metric
         * @description Create a new usage metric for a specific app.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the app */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name?: string;
                        eventName?: string;
                        calculation?: string;
                        params?: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description Usage metric created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            usageMetric?: components["schemas"]["UsageMetric"];
                        };
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description App not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/unsubscribe_groups/{id}/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove email unsubscribe group member
         * @description Remove an email unsubscribe group member from a group.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the email unsubscribe group */
                    id: string;
                    /** @description The ID of the member to remove from the unsubscribe group */
                    member_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The success of the operation. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/unsubscribe_groups/{id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all email unsubscribe group members
         * @description Get a list of email unsubscribe group members.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the email unsubscribe group */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of email unsubscribe group members. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            members: components["schemas"]["EmailUnsubscribeGroupMember"][];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        put?: never;
        /**
         * Add email unsubscribe group members
         * @description Add email unsubscribe group members to a group.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the email unsubscribe group */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        emails: string[];
                    };
                };
            };
            responses: {
                /** @description A list of email unsubscribe group members. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        /**
         * Delete email unsubscribe group members by email addresses
         * @description Delete email unsubscribe group members from a group.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the email unsubscribe group */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        emails: string[];
                    };
                };
            };
            responses: {
                /** @description The success of the delete operation. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a company
         * @description Get a company by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the company */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The company. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            company?: components["schemas"]["Company"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Company not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a company
         * @description Update a company's details.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the company */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the company */
                        name?: string;
                        /** @description The id of the primary customer. A company can only have one parent (primary) customer, but many customers can be assigned to the same companyId. */
                        parentCustomerId: string;
                    };
                };
            };
            responses: {
                /** @description The updated company. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Company"];
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Company not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete a company
         * @description Delete a company by its ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the company */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Company deleted successfully. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Company not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer_segments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a customer segment
         * @description Gets a customer segment by ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the customer segment */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A customer segment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customField?: components["schemas"]["CustomerSegment"];
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description Customer segment not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/custom_fields/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a custom field
         * @description Gets a custom field by ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the custom field */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A custom customer field */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customField?: components["schemas"]["CustomField"];
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description Custom field not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a custom field
         * @description Updates a custom field by ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the custom field */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The ID of the app to associate with the custom field */
                        appId?: string;
                        defaultValue?: components["schemas"]["CustomFieldDefaultValue"];
                        options?: string[];
                        /** @description If true, and no appId is set, the field will be settable on all apps. If false and no appId is set, it will be a customer level field. */
                        appLevel?: boolean;
                        /** @description If true, the field will be shown on the customer detail page by default. Can be toggled by the user. */
                        showOnCustomerDetail?: boolean;
                        /**
                         * @description If true, your field will only be accessible via the API by your client. If false, all clients can access the field but only your client can mutate it.
                         * @default true
                         */
                        private?: boolean;
                        /**
                         * @description If true, the custom field can be used as a filter in the customer list and customer segments.
                         * @default true
                         */
                        filterable?: boolean;
                    };
                };
            };
            responses: {
                /** @description The updated custom customer field */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            customField?: components["schemas"]["CustomField"];
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description Custom field not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete a custom field
         * @description Deletes a custom field by ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the custom field */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Custom field successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                /** @description Custom field not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flow/extensions/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an action
         * @description Updates an existing flow action with the provided details.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the flow action to update. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The name of the flow action. */
                        name?: string;
                        /** @description The description of the flow action. */
                        description?: string;
                        /** @description The URL of the flow action. */
                        url?: string;
                        /** @description The settings schema of the flow action. */
                        settingsSchema?: Record<string, never>;
                    };
                };
            };
            responses: {
                /** @description Successfully updated the flow action. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            action?: components["schemas"]["Action"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Action not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete an Action
         * @description Deletes an existing Action.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the Action to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted the flow Action. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates if the deletion was successful. */
                            success?: boolean;
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description API Action not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single subscription
         * @description Retrieve a single subscription by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the subscription. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A single subscription. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            subscription?: components["schemas"]["Subscription"];
                        };
                    };
                };
                401: components["responses"]["401"];
                403: components["responses"]["403"];
                /** @description Subscription not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    "customers/installed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/installed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer installed */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/uninstalled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/uninstalled */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer uninstalled */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["UninstallEventWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/reinstalled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/reinstalled */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer reinstalled */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/deactivated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/deactivated */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer deactivated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["UninstallEventWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/reactivated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/reactivated */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer reactivated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/reviewed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/reviewed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer reviewed */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["ReviewWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/approaching_capped_limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/approaching_capped_limit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer approaching capped limit */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/capped_amount_updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/capped_amount_updated */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer capped amount updated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/usage_charge_exceeds_limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/usage_charge_exceeds_limit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer usage charge exceeds limit */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/subscribed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/subscribed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer subscribed */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/unsubscribed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/unsubscribed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer unsubscribed */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/upgraded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/upgraded */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer upgraded their subscription */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/downgraded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/downgraded */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer downgraded their subscription */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/subscription_frozen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/subscription_frozen */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer subscription frozen */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/subscription_unfrozen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/subscription_unfrozen */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer subscription unfrozen */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/one_time_charge_activated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/one_time_charge_activated */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer one-time charge activated */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["AppChargeWebhook"] & components["schemas"]["TransactionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/refunded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/refunded */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer refunded */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["TransactionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/trial_expired": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/trial_expired */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer trial expired */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/trial_extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/trial_extended */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer trial extended */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWebhook"] & components["schemas"]["SubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/first_identify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/first_identify */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer first identify */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["CustomerWithoutSubscriptionWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "customers/usage_event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** customers/usage_event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Customer usage event */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/join_requested": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/join_requested */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate join requested */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"] & components["schemas"]["AffiliateMembershipWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/join_approved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/join_approved */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate join approved */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"] & components["schemas"]["AffiliateMembershipWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/join_denied": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/join_denied */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate join denied */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"] & components["schemas"]["AffiliateMembershipWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/joined": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/joined */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate joined */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"] & components["schemas"]["AffiliateMembershipWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/referral": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/referral */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate referral */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"] & components["schemas"]["AffiliateMembershipWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/referral_requested": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/referral_requested */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate referral requested */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "affiliates/payment_requested": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** affiliates/payment_requested */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Affiliate payment requested */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["AppWebhook"] & components["schemas"]["AffiliateWebhook"] & components["schemas"]["AffiliateProgramWebhook"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "extensions/uninstalled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** extensions/uninstalled */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Extension uninstalled */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EventWebhook"] & components["schemas"]["ExtensionWebhook"] & components["schemas"]["ExtensionUninstallPayload"];
                };
            };
            responses: {
                /** @description Return a 200 status to indicate that the data was received successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        CursorPagination: {
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
            nextCursor?: string;
            previousCursor?: string;
        };
        Pagination: {
            total?: number;
            hasNextPage?: boolean;
            hasPreviousPage?: boolean;
            cursor?: string;
        };
        ExtensionUninstallPayload: {
            /** @enum {string} */
            reason?: "no_longer_needed" | "feature_missing" | "too_complicated" | "other";
            description?: string;
        };
        AppEvent: {
            id?: string;
            type?: string;
            appId?: string;
            /** @description The ID of the customer. If applicable to the app event. */
            customerId?: string;
            /** @description The ID of the app installation. If applicable to the app event. */
            appInstallationId?: string;
            /** @description The ID of the transaction. If applicable to the app event. */
            transactionId?: string;
            /** @description The ID of the previous subscription. If applicable to the app event. */
            previousSubscriptionId?: string;
            /** @description The ID of the subscription. If applicable to the app event. */
            subscriptionId?: string;
            /**
             * Format: date-time
             * @description The date and time the app event occurred.
             */
            occurredAt?: string;
            /**
             * Format: date-time
             * @description The date and time the app event was created in Mantle.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The date and time the app event was last updated. Events are not usually updated.
             */
            updatedAt?: string;
        };
        App: {
            id: string;
            name: string;
            displayName?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: uri */
            iconUrl?: string;
            slug?: string;
            development?: boolean;
            /** @description The client ID for the app on the platform (such as Shopify). */
            apiClientId?: string;
        };
        Charge: {
            /** @description Unique identifier for the charge */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time when the charge was billed
             */
            billedOn?: string;
            /** @description Name of the charge */
            name?: string;
            /** @description Name of the customer associated with the charge */
            customerName?: string;
            /** @description Domain of the customer associated with the charge */
            customerDomain?: string;
            /** @description Name of the app associated with the charge */
            appName?: string;
            /** @description Type of the charge */
            type?: string;
            /** @description Status of the charge */
            status?: string;
            /**
             * Format: float
             * @description Amount of the charge
             */
            amount?: number;
            /** @description Currency code of the charge */
            currencyCode?: string;
            /**
             * Format: date-time
             * @description Date and time when the charge was paid
             */
            paidOn?: string;
            /** @description Indicates if the charge is a test charge */
            test?: boolean;
        };
        Company: {
            id?: string;
            name?: string;
            /** Format: date-time */
            createdAt?: string;
            /** @description The ID of the parent (primary) customer. */
            parentCustomerId?: string;
            /** @description An array of customers, including the primary customer, associated with this company. */
            customerIds?: string[];
            /** Format: date-time */
            updatedAt?: string;
        };
        CustomField: {
            /** @description The ID of the custom field. */
            id?: string;
            /** @description The name of the custom field. */
            name?: string;
            /**
             * @description The type of the custom field.
             * @enum {string}
             */
            type?: "string" | "number" | "json" | "checkbox" | "select" | "multiselect" | "url" | "date";
            /** @description The options for the custom field if it is a 'select' type. */
            options?: string[];
            defaultValue?: components["schemas"]["CustomFieldDefaultValue"];
            /** @description The ID of the app the custom field is associated with. */
            appId?: string;
            /** @description Will be true if the custom field is an All Apps custom field. False if the custom field is a customer field, or a field specific to a single app. */
            appLevel?: boolean;
            /** @description Whether the custom field should be shown on the customer detail page. This can also be toggled by the user. */
            showOnCustomerDetail?: boolean;
            /** @description If true, your field will only be accessible via the API by your client. If false, all clients can access read the field but only the owning client can mutate it. */
            private?: boolean;
            /** @description If true, the custom field can be used as a filter in the customer list. */
            filterable?: boolean;
        };
        /** @description The default value of the custom field */
        CustomFieldDefaultValue: string | number | boolean | Record<string, never> | string[];
        CustomerSegment: {
            /** @description The unique identifier for the customer segment */
            id?: string;
            /** @description The name of the customer segment */
            name?: string;
            /** @description The filters applied to the customer segment */
            filters?: Record<string, never>[];
        };
        /** @description An app installation represents a customer's installation of an app. The corresponding App can be found under the app property. */
        AppInstallation: {
            id?: string;
            /** Format: date-time */
            installedAt?: string;
            /** Format: date-time */
            uninstalledAt?: string;
            /** Format: date-time */
            trialStartsAt?: string;
            /** Format: date-time */
            trialExpiresAt?: string;
            app?: components["schemas"]["App"];
            averageMonthlyRevenue?: number;
            lifetimeValue?: number;
            last30Revenue?: number;
            /** @description An object of custom fields, keyed by the custom field name. */
            customFields?: Record<string, never>;
            /** @description The churn prediction for the customer. 0 being high risk, 3 being low risk. */
            churnPrediction?: number;
            /** @description A label lookup for the churnPrediction, such as { label: "0 - 2 weeks", status: "critical" } for churnPrediction 0. */
            churnPredictionLabel?: Record<string, never>;
            /** @description The ID of the customer on the platform, such as the Shopify Shop ID. */
            platformId?: string;
            /** @description The original traffic source of the customer, if available. */
            trafficSource?: string;
            /** @description The current active subscription for this app installation, if any. */
            subscription?: components["schemas"]["Subscription"];
        };
        Customer: {
            id: string;
            name?: string;
            email?: string;
            /** @description An object of billing address fields, keyed by field name. */
            billingAddress?: Record<string, never> | null;
            domain?: string;
            shopifyDomain?: string;
            tags?: string[];
            /**
             * Format: date-time
             * @description The date and time of the first interaction with the customer, such as the first time they installed an app.
             */
            firstInteractionAt?: string;
            /** @description An object of custom fields, keyed by the custom field name. */
            customFields?: Record<string, never>;
            appInstallations?: components["schemas"]["AppInstallation"][];
            /** @description The ID of the company this customer belongs to, if any. */
            companyId?: string;
            /**
             * Format: date-time
             * @description The date and time of the creation of the customer.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time of the last update to the customer.
             */
            updatedAt: string;
            contacts?: ({
                label?: string;
            } & components["schemas"]["Contact"])[];
        };
        CustomerContact: {
            customerId?: string;
            label?: string;
        };
        Contact: {
            id?: string;
            name?: string;
            email?: string;
            phone?: string;
            jobTitle?: string;
            /** @description The label for the contact for this customer. Only set in customer API objects. */
            label?: string;
            customers?: components["schemas"]["CustomerContact"][];
            notes?: string;
            /** @description Array of JSON objects containing social links or profiles. */
            socialProfiles?: {
                /**
                 * @description The type of social profile.
                 * @enum {string}
                 */
                key?: "linkedin" | "x" | "facebook" | "instagram" | "website";
                /** @description The URL of the social profile. */
                value?: string;
            }[];
            tags?: string[];
            createdAt?: string;
            updatedAt?: string;
        };
        DealFlow: {
            /** @description The unique identifier for the deal flow. */
            id?: string;
            /** @description The name of the deal flow. */
            name?: string;
            /** @description The description of the deal flow. */
            description?: string;
            /** @description The display order of the deal flow. */
            displayOrder?: number;
            /** @description The default acquisition channel for deals in this flow. */
            defaultAcquisitionChannel?: string;
            /** @description The default acquisition source for deals in this flow. */
            defaultAcquisitionSource?: string | components["schemas"]["DealFlowDefaultSource"];
            defaultDealOwner?: components["schemas"]["DealFlowUser"];
            affiliate?: components["schemas"]["DealFlowAffiliate"];
            partnership?: components["schemas"]["DealFlowPartnership"];
            acquirer?: components["schemas"]["DealFlowUser"];
            dealStages?: components["schemas"]["DealFlowStage"][];
            /**
             * Format: date-time
             * @description The creation timestamp of the deal flow.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The last update timestamp of the deal flow.
             */
            updatedAt?: string;
            /**
             * Format: date-time
             * @description The deletion timestamp of the deal flow.
             */
            deletedAt?: string;
        };
        DealFlowStage: {
            id?: string;
            name?: string;
            description?: string;
            displayOrder?: number;
            stage?: string;
            /** Format: float */
            weight?: number;
            trigger?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        DealFlowUser: {
            id?: string;
            name?: string;
            email?: string;
        };
        DealFlowAffiliate: {
            id?: string;
            name?: string;
            email?: string;
        };
        DealFlowPartnership: {
            id?: string;
            displayName?: string;
        };
        /** @description The default acquisition source when it's an object (affiliate, partnership, or user) */
        DealFlowDefaultSource: {
            id?: string;
            name?: string;
            email?: string;
            displayName?: string;
        };
        Deal: {
            /** @description The unique identifier for the deal. */
            id?: string;
            /** @description The name of the deal. */
            name?: string;
            /**
             * Format: float
             * @description The monetary value of the deal.
             */
            amount?: number;
            /** @description The currency code for the deal amount (e.g., USD, EUR). */
            amountCurrencyCode?: string;
            /**
             * Format: float
             * @description The current estimated value of the deal.
             */
            currentAmount?: number;
            /** @description The channel through which the deal was acquired. */
            acquisitionChannel?: string;
            /** @description The specific source of the deal acquisition. */
            acquisitionSource?: string;
            /** @description Additional notes about the deal. */
            notes?: string;
            /**
             * Format: date-time
             * @description The timestamp of the first interaction with the prospect.
             */
            firstInteractionAt?: string;
            /**
             * Format: date-time
             * @description The expected closing date for the deal.
             */
            closingAt?: string;
            /**
             * Format: date-time
             * @description The actual closing date for the deal.
             */
            closedAt?: string;
            /**
             * Format: date-time
             * @description The timestamp when the deal was archived.
             */
            archivedAt?: string;
            dealStage?: components["schemas"]["DealStage"];
            dealFlow?: components["schemas"]["DealFlow"];
            customer?: components["schemas"]["DealCustomer"];
            app?: components["schemas"]["DealApp"];
            plan?: components["schemas"]["DealPlan"];
            affiliate?: components["schemas"]["DealAffiliate"];
            partnership?: components["schemas"]["DealPartnership"];
            acquirer?: components["schemas"]["DealAcquirer"];
            owners?: components["schemas"]["DealOwner"][];
            contacts?: components["schemas"]["DealContact"][];
            /**
             * Format: date-time
             * @description The creation timestamp of the deal.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The last update timestamp of the deal.
             */
            updatedAt?: string;
        };
        DealStage: {
            id?: string;
            name?: string;
            stage?: string;
            /** Format: float */
            weight?: number;
        };
        DealCustomer: {
            id?: string;
            name?: string;
            email?: string;
        };
        DealApp: {
            id?: string;
            name?: string;
        };
        DealPlan: {
            id?: string;
            name?: string;
        };
        DealAffiliate: {
            id?: string;
            name?: string;
        };
        DealPartnership: {
            id?: string;
            name?: string;
            displayName?: string;
        };
        DealAcquirer: {
            id?: string;
            name?: string;
        };
        DealOwner: {
            id?: string;
            userId?: string;
            user?: {
                id?: string;
                name?: string;
                email?: string;
            };
        };
        DealContact: {
            id?: string;
            contactId?: string;
            contact?: {
                id?: string;
                name?: string;
                email?: string;
            };
        };
        EmailUnsubscribeGroup: {
            /** @description The unique identifier for the email unsubscribe group. */
            id?: string;
            /** @description The name of the email unsubscribe group. */
            name?: string;
            /** @description The description of the email unsubscribe group. */
            description?: string;
            /**
             * Format: date-time
             * @description The creation timestamp of the email unsubscribe group.
             */
            createdAt?: string;
        };
        EmailUnsubscribeGroupMember: {
            /** @description The unique identifier for the email unsubscribe group member. */
            id?: string;
            /** @description The email address of the email unsubscribe group member. */
            email?: string;
            /**
             * Format: date-time
             * @description The date and time the email unsubscribe group member was added to the group.
             */
            dateAdded?: string;
        };
        Feature: {
            /** @description The unique identifier for the feature. */
            id?: string;
            /** @description The name of the feature. */
            name?: string;
            /** @description The key associated with the feature. */
            key?: string;
            /**
             * @description The type of the feature.
             * @enum {string}
             */
            type?: "boolean" | "limit" | "limit_with_overage";
            /** @description A description of the feature. */
            description?: string;
            /** @description The default value of the feature. */
            defaultValue?: string;
            usageMetric?: components["schemas"]["UsageMetric"];
            /**
             * Format: date-time
             * @description The creation timestamp of the feature.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The last update timestamp of the feature.
             */
            updatedAt?: string;
        };
        Action: {
            /** @description Unique identifier for the API action. */
            id?: string;
            /** @description URL address of the API action. */
            address?: string;
            /** @description Name of the API action. */
            name?: string;
            /** @description Handle of the API action. */
            handle?: string;
            /** @description Description of the API action. */
            description?: string;
            /** @description Identifier of the organization associated with the API action. */
            organizationId?: string;
            /**
             * Format: date-time
             * @description Timestamp when the API action was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the API action was last updated.
             */
            updatedAt?: string;
            /** @description Schema for the settings of the API action. */
            settingsSchema?: Record<string, never>;
        };
        FlowActionRun: {
            /** @description Unique identifier for the flow action run. */
            id?: string;
            /** @description Status of the flow action run. */
            status?: string;
            /** @description Reason for the failure of the flow action run. */
            failedReason?: string;
            /**
             * Format: date-time
             * @description Timestamp when the flow action run was started.
             */
            startedAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the flow action run failed.
             */
            failedAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the flow action run was completed.
             */
            completedAt?: string;
        };
        Invoice: {
            /** @description Unique identifier for the invoice. */
            id?: string;
            /**
             * Format: date-time
             * @description Start date of the billing period.
             */
            periodStart?: string;
            /**
             * Format: date-time
             * @description End date of the billing period.
             */
            periodEnd?: string;
            /** @description Current status of the invoice. */
            status?: string;
            /** @description Total amount of the invoice. */
            total?: number;
            /** @description Subtotal amount of the invoice. */
            subtotal?: number;
            /** @description Three-letter currency code (e.g., USD, EUR). */
            currencyCode?: string;
            /** @description Invoice number from Stripe. */
            number?: string | null;
            /** @description URL to the hosted invoice page on Stripe. */
            hostedInvoiceUrl?: string | null;
            /**
             * Format: date-time
             * @description Timestamp when the invoice was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Timestamp when the invoice was last updated.
             */
            updatedAt?: string;
        };
        Organization: {
            /** @description Unique identifier for the organization */
            id?: string;
            /** @description Name of the organization */
            name?: string;
            /** @description Tags associated with the organization's customers */
            customerTags?: string[];
            /** @description Tags associated with the organization's contacts */
            contactTags?: string[];
            currentInstallation?: {
                /** @description Access scopes for the current installation */
                accessScopes?: string[];
            };
        };
        Plan: {
            /** @description The unique identifier for the plan. */
            id?: string;
            /** @description The name of the plan. */
            name?: string;
            /** @description A description of the plan. */
            description?: string;
            /** @description The amount for the plan. */
            amount?: number;
            /** @description The currency code for the plan amount. */
            currencyCode?: string;
            /** @description The type of the plan. */
            type?: string;
            /** @description Whether the plan is public. */
            public?: boolean;
            /** @description Whether the plan is visible. */
            visible?: boolean;
            /** @description The interval for the plan. */
            interval?: string;
            /** @description The number of trial days for the plan. */
            trialDays?: number;
            /** @description The monthly revenue for the plan. */
            monthlyRevenue?: number;
            /** @description The lifetime value of the plan. */
            lifetimeValue?: number;
            /** @description The average lifetime value of the plan. */
            averageLifetimeValue?: number;
            /** @description The number of subscribers for the plan. */
            subscriberCount?: number;
            /** @description The number of active trials for the plan. */
            activeTrialCount?: number;
            /** @description Whether the plan has flexible billing. */
            flexBilling?: boolean;
            /** @description The terms for flexible billing. */
            flexBillingTerms?: string;
            /**
             * Format: date-time
             * @description The date when the plan was deprecated.
             */
            deprecatedAt?: string;
            /** @description The features of the plan. */
            features?: {
                [key: string]: components["schemas"]["PlanFeature"];
            };
            /** @description The customer ID associated with the plan. */
            customerId?: string;
            /** @description The tags associated with the customer. */
            customerTags?: string[];
            /** @description The tags to exclude for the customer. */
            customerExcludeTags?: string[];
            /** @description The custom fields associated with the plan. */
            customFields?: {
                [key: string]: components["schemas"]["CustomField"];
            };
            /** @description The Shopify plans associated with the plan. */
            shopifyPlans?: string[];
            /**
             * Format: date-time
             * @description The creation date of the plan.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The last update date of the plan.
             */
            updatedAt?: string;
        };
        PlanFeature: {
            /** @description The unique identifier for the plan feature. */
            id?: string;
            /** @description The name of the plan feature. */
            name?: string;
            /** @description The type of the plan feature. */
            type?: string;
            /** @description A description of the plan feature. */
            description?: string;
            /** @description The value of the plan feature. */
            value?: string;
            /** @description The default value of the plan feature. */
            defaultValue?: string;
            /** @description The display order of the plan feature. */
            displayOrder?: number;
        };
        Review: {
            id?: string;
            rating?: number;
            /** Format: date-time */
            date?: string;
            content?: string;
            location?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Subscription: {
            id?: string;
            plan?: components["schemas"]["Plan"];
            lineItems?: {
                id?: string;
                type?: string;
                amount?: number;
                currencyCode?: string;
                presentmentAmount?: number;
                presentmentCurrencyCode?: string;
                planId?: string;
            }[];
            active?: boolean;
            /** Format: date-time */
            cancelOn?: string;
            /** Format: date-time */
            billingCycleAnchor?: string;
            /** Format: date-time */
            currentPeriodStart?: string;
            /** Format: date-time */
            currentPeriodEnd?: string;
            /** Format: date-time */
            trialStartsAt?: string;
            /** Format: date-time */
            trialExpiresAt?: string;
            /** Format: date-time */
            activatedAt?: string;
            /** Format: date-time */
            canceledAt?: string;
            /** Format: date-time */
            frozenAt?: string;
            features?: components["schemas"]["PlanFeature"][];
            featuresOrder?: string[];
            /** Format: date-time */
            createdAt?: string;
            confirmationUrl?: string;
            shopifySubscription?: {
                id?: string;
            };
            usageCappedAmount?: number;
            usageBalanceUsed?: number;
            appliedDiscount?: {
                id?: string;
                priceAfterDiscount?: number;
                presentmentPriceAfterDiscount?: number;
                /** Format: date-time */
                discountStartsAt?: string;
                /** Format: date-time */
                discountEndsAt?: string;
                active?: boolean;
            };
            subtotal?: number;
            /** @description The total amount of the subscription after discounts */
            total?: number;
            presentmentSubtotal?: number;
            presentmentTotal?: number;
        };
        Transaction: {
            id: string;
            /** Format: date-time */
            date: string;
            type: string;
            processingFee?: number;
            processingFeeCurrencyCode?: string;
            netAmount?: number;
            netAmountCurrencyCode?: string;
            grossAmount?: number;
            grossAmountCurrencyCode?: string;
            billingProvider?: string;
            billingProviderId?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            subscriptionId?: string;
            appId: string;
            customerId?: string;
            appInstallationId?: string;
        };
        UsageEvent: {
            /** @description The unique identifier for the usage event. */
            eventId?: string;
            /** @description The event name associated with the usage metric. */
            eventName?: string;
            /**
             * Format: date-time
             * @description The timestamp of the usage event.
             */
            timestamp?: string;
            /** @description The properties of the usage event. */
            properties?: Record<string, never>;
        };
        UsageMetric: {
            /** @description The unique identifier for the usage metric. */
            id?: string;
            /** @description The name of the usage metric. */
            name?: string;
            /** @description The event name associated with the usage metric. */
            eventName?: string;
            /**
             * @description The calculation method for the usage metric.
             * @enum {string}
             */
            calculation?: "count" | "sum";
            /** @description Additional parameters for the usage metric. */
            params?: {
                [key: string]: string;
            };
        };
        User: {
            /** @description The unique identifier of the user. */
            id?: string;
            /** @description The name of the user. */
            name?: string;
            /** @description The email address of the user. */
            email?: string;
        };
        Webhook: {
            /** @description Unique identifier for the webhook */
            id?: string;
            /** @description The topic of the webhook */
            topic?: string;
            /**
             * Format: uri
             * @description The address where the webhook will send requests
             */
            address?: string;
            /** @description List of application IDs to register this webhook for. If not set, will register for all apps. */
            appIds?: string[];
            /**
             * Format: date-time
             * @description The creation timestamp of the webhook
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The last update timestamp of the webhook
             */
            updatedAt?: string;
            /** @description The filter criteria for the webhook. This property only applies to the customers/usage_event topic. */
            filter?: {
                /** @description Only usage events with a matching name will fire this webhook. */
                eventName?: string;
            };
        };
        InvalidTokenError: {
            error?: string;
        };
        MissingScopesError: {
            error?: string;
        };
        EventWebhook: {
            /** @description The unique ID of the event */
            id?: string;
            /**
             * @description What resource this event is related to
             * @enum {string}
             */
            type?: "customer" | "affiliate" | "usage_event" | "extension";
            /**
             * Format: date-time
             * @description The date and time the event occurred
             */
            date?: string;
        };
        AppWebhook: {
            app?: {
                /** @description Unique identifier for the app. */
                id?: string;
                /** @description Name of the app. */
                name?: string;
            };
        };
        PlanFeatureWebhook: {
            /** @description Unique identifier for the plan feature. */
            id?: string;
            /** @description Name of the plan feature. */
            name?: string;
            /** @description Type of the plan feature. */
            type?: string;
            /** @description Description of the plan feature. */
            description?: string;
            /** @description Value of the plan feature. */
            value?: {
                [key: string]: string | number;
            };
            /** @description Display order of the plan feature. */
            displayOrder?: number;
        };
        PlanUsageChargeWebhook: {
            /** @description Unique identifier for the usage charge. */
            id?: string;
            /** @description Amount of the usage charge. */
            amount?: number;
            /** @description Type of the usage charge. */
            type?: string;
            /** @description Terms of the usage charge. */
            terms?: string;
            /** @description Capped amount of the usage charge. */
            cappedAmount?: number;
            /** @description Name of the event associated with the usage charge. */
            eventName?: string;
        };
        PlanWebhook: {
            /** @description Unique identifier for the plan. */
            id?: string;
            /** @description Name of the plan. */
            name?: string;
            /** @description Description of the plan. */
            description?: string;
            /** @description Amount of the plan. */
            amount?: number;
            /** @description Currency code of the plan. */
            currencyCode?: string;
            /** @description Indicates if the plan is public. */
            public?: boolean;
            /** @description Number of trial days for the plan. */
            trialDays?: number;
            /** @description Billing interval of the plan. */
            interval?: string;
            /**
             * Format: date-time
             * @description Date when the plan was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date when the plan was last updated.
             */
            updatedAt?: string;
            /** @description Features included in the plan. */
            features?: {
                [key: string]: components["schemas"]["PlanFeatureWebhook"];
            };
            /** @description Order of the features in the plan. */
            featuresOrder?: string[];
            /** @description Usage charges associated with the plan. */
            usageCharges?: components["schemas"]["PlanUsageChargeWebhook"][];
            /** @description Custom fields associated with the plan. */
            customFields?: Record<string, never>;
            stripe?: {
                /** @description Stripe price ID. */
                id?: string;
                /**
                 * Format: date-time
                 * @description Date when the Stripe price was created.
                 */
                createdAt?: string;
            };
        };
        AppInstallationWebhook: {
            appInstallation?: {
                /**
                 * Format: date-time
                 * @description Date when the app was installed.
                 */
                installedAt?: string;
                /**
                 * Format: date-time
                 * @description Date when the app was uninstalled.
                 */
                uninstalledAt?: string;
                /**
                 * Format: date-time
                 * @description Date when the trial period starts.
                 */
                trialStartsAt?: string;
                /**
                 * Format: date-time
                 * @description Date when the trial period expires.
                 */
                trialExpiresAt?: string;
                /** @description Lifetime value of the app installation. */
                lifetimeValue?: number;
                /** @description Average monthly revenue from the app installation. */
                averageMonthlyRevenue?: number;
                /** @description Platform ID of the app installation, such as Shopify shop ID. */
                platformId?: string;
            };
        };
        BaseCustomerWebhook: {
            /** @description Unique identifier for the customer. */
            id?: string;
            /** @description Email address of the customer. */
            email?: string;
            /** @description Name of the customer. */
            name?: string;
            /** @description Tags associated with the customer. */
            tags?: string[];
            /** @description Indicates if the customer is a test customer. */
            test?: boolean;
            shopify?: {
                /** @description Shopify shop ID. */
                id?: string;
                /** @description Shopify shop ID. */
                shopId?: string;
                /** @description Shopify domain. */
                myshopifyDomain?: string;
                /** @description Shopify plan name. */
                planName?: string;
                /** @description Indicates if the plan is a development plan. */
                isDevPlan?: boolean;
                /** @description Indicates if the plan is a Shopify Plus plan. */
                isPlus?: boolean;
            };
            stripe?: {
                /** @description Stripe customer ID. */
                id?: string;
                /** @description Name of the Stripe customer. */
                name?: string;
                /** @description Email of the Stripe customer. */
                email?: string;
                /** @description Indicates if the Stripe customer is in live mode. */
                livemode?: boolean;
                /**
                 * Format: date-time
                 * @description Creation date of the Stripe customer.
                 */
                createdAt?: string;
            };
            /** @description URL of the shop's icon. */
            iconUrl?: string;
            /** @description Timezone of the shop. */
            timezone?: string;
            /** @description URL of the shop. */
            url?: string;
            /** @description Domain of the shop. */
            domain?: string;
            /** @description City where the shop is located. */
            city?: string;
            /** @description Province where the shop is located. */
            province?: string;
            /** @description Country code of the shop. */
            countryCode?: string;
            /** @description Currency code used by the shop. */
            currencyCode?: string;
            /** @description Industry of the shop. */
            industry?: string;
            /**
             * Format: date-time
             * @description Date when the app was installed.
             */
            installedAt?: string;
            /**
             * Format: date-time
             * @description Date when the app was uninstalled.
             */
            uninstalledAt?: string;
            /**
             * Format: date-time
             * @description Date when the trial period starts.
             */
            trialStartsAt?: string;
            /**
             * Format: date-time
             * @description Date when the trial period expires.
             */
            trialExpiresAt?: string;
            /** @description Lifetime value of the customer. */
            lifetimeValue?: number;
            /** @description Average monthly revenue from the customer. */
            averageMonthlyRevenue?: number;
            /** @description Platform ID of the customer. */
            platformId?: string;
            /** @description Billing status of the customer. */
            billingStatus?: string;
        };
        CustomerWebhook: {
            customer?: components["schemas"]["BaseCustomerWebhook"] & components["schemas"]["AppInstallationWebhook"] & components["schemas"]["SubscriptionWebhook"];
        };
        CustomerWithoutSubscriptionWebhook: {
            customer?: components["schemas"]["BaseCustomerWebhook"] & components["schemas"]["AppInstallationWebhook"];
        };
        SubscriptionWebhook: {
            subscription?: {
                /** @description Unique identifier for the subscription. */
                id?: string;
                /** @description The plan associated with the subscription. */
                plan?: components["schemas"]["PlanWebhook"];
                /** @description Indicates if the subscription is active. */
                active?: boolean;
                /**
                 * Format: date-time
                 * @description Date when the subscription will be canceled.
                 */
                cancelOn?: string;
                /**
                 * Format: date-time
                 * @description Date when the subscription was activated.
                 */
                activatedAt?: string;
                /**
                 * Format: date-time
                 * @description Date when the subscription was canceled.
                 */
                canceledAt?: string;
                /**
                 * Format: date-time
                 * @description Date when the subscription was frozen.
                 */
                frozenAt?: string;
                /**
                 * Format: date-time
                 * @description Start date of the current billing period.
                 */
                currentPeriodStart?: string;
                /**
                 * Format: date-time
                 * @description End date of the current billing period.
                 */
                currentPeriodEnd?: string;
                /** @description Features included in the subscription plan. */
                features?: {
                    [key: string]: components["schemas"]["PlanFeatureWebhook"];
                };
                /** @description Order of the features in the subscription plan. */
                featuresOrder?: string[];
                /** @description Usage charges associated with the subscription. */
                usageCharges?: components["schemas"]["PlanUsageChargeWebhook"][];
                /**
                 * Format: date-time
                 * @description Date when the subscription was created.
                 */
                createdAt?: string;
                /** @description URL for confirming the subscription. */
                confirmationUrl?: string;
                shopifySubscription?: {
                    /** @description Shopify subscription charge ID. */
                    id?: string;
                };
                /** @description Capped amount for usage charges. */
                usageCappedAmount?: number;
                /** @description Balance used for usage charges. */
                usageBalanceUsed?: number;
                stripe?: {
                    /** @description Stripe subscription ID. */
                    id?: string;
                    /**
                     * Format: date-time
                     * @description Date when the Stripe subscription was created.
                     */
                    createdAt?: string;
                };
            };
        };
        InvoiceWebhook: {
            /** @description Unique identifier for the invoice. */
            id?: string;
            /**
             * Format: date-time
             * @description Start date of the invoice period.
             */
            periodStart?: string;
            /**
             * Format: date-time
             * @description End date of the invoice period.
             */
            periodEnd?: string;
            /**
             * Format: date-time
             * @description Date when the invoice was created.
             */
            createdAt?: string;
            /** @description Total amount of the invoice. */
            total?: number;
            /** @description Currency code of the invoice. */
            currencyCode?: string;
            /** @description Status of the invoice. */
            status?: string;
            /** @description Subscription associated with the invoice. */
            subscription?: components["schemas"]["SubscriptionWebhook"];
            stripe?: {
                /** @description Stripe invoice ID. */
                id?: string;
                /**
                 * Format: date-time
                 * @description Date when the Stripe invoice was created.
                 */
                createdAt?: string;
            };
            /** @description Customer associated with the invoice. */
            customer?: components["schemas"]["CustomerWebhook"];
        };
        AppChargeWebhook: components["schemas"]["CustomerWebhook"] & components["schemas"]["TransactionWebhook"] & {
            appCharge?: {
                /** @description Unique identifier for the app charge. */
                id?: string;
                /** @description Name of the app charge. */
                name?: string;
                /** @description Amount of the app charge. */
                amount?: number;
                /** @description Currency code of the app charge. */
                currencyCode?: string;
                /** @description Indicates if the app charge is a test charge. */
                test?: boolean;
                shopifyAppCharge?: {
                    /** @description Shopify app charge ID. */
                    id?: string;
                    /** @description Return URL for the Shopify app charge. */
                    returnUrl?: string;
                };
                /**
                 * Format: date-time
                 * @description Date when the app charge was created.
                 */
                createdAt?: string;
            };
        };
        TransactionWebhook: {
            transaction?: {
                /** @description Unique identifier for the transaction. */
                id?: string;
                /**
                 * Format: date-time
                 * @description Date when the transaction was created.
                 */
                date?: string;
                /** @description Type of the transaction. */
                type?: string;
                /** @description Gross amount of the transaction. */
                grossAmount?: number;
                /** @description Currency code of the gross amount. */
                grossAmountCurrencyCode?: string;
                /** @description Net amount of the transaction. */
                netAmount?: number;
                /** @description Currency code of the net amount. */
                netAmountCurrencyCode?: string;
                /** @description Processing fee of the transaction. */
                processingFee?: number;
                /** @description Currency code of the processing fee. */
                processingFeeCurrencyCode?: string;
                /** @description Shopify transaction information if the transaction was on Shopify. */
                shopifyTransaction?: {
                    /** @description Shopify transaction ID. */
                    id?: string;
                };
                /** @description Stripe transaction information if the transaction was on Stripe. */
                stripe?: {
                    /** @description Stripe transaction ID. */
                    id?: string;
                    /**
                     * Format: date-time
                     * @description Date when the Stripe transaction was created.
                     */
                    createdAt?: string;
                };
            };
        };
        /** @description Rules for the affiliate program. */
        AffiliateRulesWebhook: {
            /** @description Percentage commission for the affiliate program. */
            percentCommission?: number;
            /** @description Amount per install for the affiliate program. */
            amountPerInstall?: number;
            /** @description Duration in months for the affiliate program. */
            durationMonths?: number;
            /** @description Revenue components for the affiliate program. */
            revenueComponents?: string[];
            /** @description Revenue type for the affiliate program. */
            revenueType?: string;
            /** @description Minimum plan value for the affiliate program. */
            minPlanValue?: number;
        };
        AffiliateWebhook: unknown;
        AffiliateProgramWebhook: {
            /** @description Unique identifier for the affiliate program. */
            id?: string;
            /** @description Name of the affiliate program. */
            name?: string;
            organization?: {
                /** @description Unique identifier for the organization. */
                id?: string;
                /** @description Name of the organization. */
                name?: string;
            };
            rules?: components["schemas"]["AffiliateRulesWebhook"];
            /** @description App associated with the affiliate program. */
            app?: components["schemas"]["AppWebhook"];
        };
        AffiliateMembershipWebhook: {
            membership?: {
                /** @description Unique identifier for the affiliate membership. */
                id?: string;
                /** @description Status of the affiliate membership. */
                status?: string;
                /** @description Affiliate associated with the affiliate membership. */
                affiliate?: components["schemas"]["AffiliateWebhook"];
                /** @description Affiliate program associated with the affiliate membership. */
                affiliateProgram?: components["schemas"]["AffiliateProgramWebhook"];
                /** @description Rules associated with the affiliate membership. */
                rules?: components["schemas"]["AffiliateRulesWebhook"];
            };
        };
        AffiliateAttributionWebhook: {
            referral?: {
                /** @description Unique identifier for the affiliate attribution. */
                id?: string;
                /**
                 * Format: date-time
                 * @description Date when the affiliate attribution was created.
                 */
                date?: string;
                /**
                 * Format: date-time
                 * @description Date when the affiliate attribution was last updated.
                 */
                createdAt?: string;
                /** @description Customer associated with the affiliate attribution. */
                customer?: components["schemas"]["CustomerWithoutSubscriptionWebhook"];
            };
        };
        ReviewWebhook: {
            /** @description Unique identifier for the review. */
            id?: string;
            /** @description Rating of the review. */
            rating?: number;
            /** @description Indicates if the review was edited. */
            edited?: boolean;
            /**
             * Format: date-time
             * @description Date when the review was created.
             */
            date?: string;
            /** @description Content of the review. */
            content?: string;
            /** @description Location of the review. */
            location?: string;
            /** @description Time spent using the app. */
            timeSpentUsingApp?: string;
            /** @description Name of the merchant. */
            merchantName?: string;
        };
        UninstallEventWebhook: {
            /** @description Unique identifier for the uninstall app event. */
            id?: string;
            /** @description Description of the uninstall app event. */
            description?: string;
            /** @description English description of the uninstall app event. */
            descriptionEnglish?: string;
            /** @description Language of the description of the uninstall app event. */
            descriptionLanguage?: string;
            /** @description Reason for the uninstall app event. */
            reason?: string;
            /** @description Code for the reason of the uninstall app event. */
            reasonCode?: string;
            /** @description Codes for the reasons of the uninstall app event. */
            reasonCodes?: string[];
            /** @description English reason for the uninstall app event. */
            reasonEnglish?: string;
            /** @description Language of the reason for the uninstall app event. */
            reasonLanguage?: string;
            /** @description Seconds since the last install. */
            secondsSinceLastInstall?: number;
            /** @description Seconds since the first install. */
            secondsSinceFirstInstall?: number;
        };
        ExtensionWebhook: {
            extension?: {
                /** @description Unique identifier for the extension. */
                id?: string;
                /** @description Name of the extension. */
                name?: string;
                /** @description Description of the extension. */
                description?: string;
                /** @description Icon URL of the extension. */
                iconUrl?: string;
                /** @description URL of the extension. */
                url?: string;
                /**
                 * Format: date-time
                 * @description Date when the extension was created.
                 */
                createdAt?: string;
                /**
                 * Format: date-time
                 * @description Date when the extension was last updated.
                 */
                updatedAt?: string;
            };
        };
    };
    responses: {
        /** @description Unauthorized */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["InvalidTokenError"];
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["MissingScopesError"];
            };
        };
    };
    parameters: {
        /** @description The page number to retrieve */
        page: number;
        /** @description The number of records to retrieve */
        take: number;
        /** @description The cursor to paginate from */
        cursor: string;
        /** @description The field to sort by */
        sort: string;
        /** @description The direction to sort by */
        sortDirection: "asc" | "desc";
        /** @description The filters to apply */
        filters: Record<string, never>;
        /** @description The search term to filter by */
        search: string;
        /** @description The type of event to filter by */
        type: "installed" | "uninstalled" | "reinstalled" | "deactivated" | "reactivated" | "subscription_approaching_capped_amount" | "subscription_capped_amount_updated" | "usage_charge_exceeds_limit" | "reviewed" | "first_identify" | "subscribed" | "unsubscribed" | "upgraded" | "downgraded" | "usage_upgrade" | "usage_downgrade" | "resubscribed" | "subscription_frozen" | "subscription_unfrozen" | "trial_expired" | "trial_extended" | "trial_converted" | "charge_abandoned" | "payment_method_added" | "payment_method_removed" | "one_time_charge_activated" | "refunded" | "credit_applied" | "payment_failed" | "payment_action_required" | "subscription_paused" | "subscription_resumed" | "discount_applied" | "discount_removed" | "mantle_email_sent" | "mantle_email_delivered" | "mantle_email_opened" | "mantle_email_link_clicked" | "mantle_email_bounced" | "mantle_email_unsubscribed" | "mantle_email_spamreport";
    };
    requestBodies: {
        Customer: {
            content: {
                "application/json": {
                    name?: string;
                    email?: string;
                    /** @description The domain of the customer. */
                    domain?: string;
                    /** @description The shopify domain of the customer, ex. example.myshopify.com. */
                    shopifyDomain?: string;
                    /** @description The shopify shop id of the customer. */
                    shopifyShopId?: string;
                    /** @description The qualified url of the customer, ex. https://www.example.com. */
                    url?: string;
                    /** @description The Mantle id of the company to associate with the customer. If no company is found, assume this is shopifyShopId. */
                    companyId?: string;
                    /** @description The country code of the customer. */
                    countryCode?: string;
                    /** @description The preferred currency of the customer. */
                    preferredCurrency?: string;
                    /** @description The description of the customer. */
                    description?: string;
                    tags?: string[];
                    /** @description An object of custom fields, keyed by the custom field name. Values will be upserted and values not included will be ignored. */
                    customFields?: Record<string, never>;
                    appInstallations?: {
                        /** @description The app installation id. The correct appInstallation id can be determined by finding the desired app.id or app.name in the appInstallations array of the customer object. */
                        id?: string;
                        /** @description If the appId is specified and no id is provided, a new app installation will be created. This is used for creating lead customers on specific apps. This field can not be changed on an app installation with an id. */
                        appId?: string;
                        /** @description An object of custom fields, keyed by the custom field name. Values will be upserted and values not included will be ignored. App level fields can be specified per app installation instance, as well as specific fields. */
                        customFields?: Record<string, never>;
                    }[];
                };
            };
        };
        UsageEvent: {
            content: {
                "application/json": {
                    /** Format: date-time */
                    timestamp?: string;
                    /** @description An object containing event properties. */
                    properties?: Record<string, never>;
                    customerId?: string;
                    appId?: string;
                    eventName?: string;
                    eventId?: string;
                    /** @description Optionally pass an array of bulk events to create, will override other properties. */
                    events?: {
                        organizationId?: string;
                        apiClientId?: string;
                        customerId?: string;
                        appId?: string;
                        eventName?: string;
                        eventId?: string;
                        /** Format: date-time */
                        timestamp?: string;
                        /** @description An object containing event properties. */
                        properties?: Record<string, never>;
                        private?: boolean;
                    }[];
                    event_name?: string;
                    event_id?: string;
                    private?: boolean;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
